//file:noinspection GroovyAssignabilityCheck
import com.modrinth.minotaur.dependencies.ModDependency

plugins {
	id('fabric-loom') version('0.11.+')
	id('maven-publish')
	id('com.modrinth.minotaur') version('2.+')
	id('com.matthewprenger.cursegradle') version('1.+')
	id('io.github.juuxel.loom-quiltflower') version('1.+')
	id('org.quiltmc.quilt-mappings-on-loom') version('4.+')
}

def targetJavaVersion = 17

boolean preRelease = false

archivesBaseName = preRelease ? project.archives_base_name + '-' + project.minecraft_version + '-SNAPSHOT' : project.archives_base_name + '-' + project.minecraft_version
version = project.mod_version
group = project.maven_group

repositories {
	maven { url = 'https://maven.terraformersmc.com/releases/'}
	maven { url = 'https://maven.shedaniel.me/'}
	maven { url = 'https://jitpack.io'}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings(loom.layered {
		addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${project.quilt_mappings}:v2"))
	})

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	//Mod Menu for allowing easier config access
	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

	// maybe-data for conditional recipe loading
	modImplementation "com.github.Reoseah:maybe-more-data:${project.maybedata_version}"
	include "com.github.Reoseah:maybe-more-data:${project.maybedata_version}"

	// Cloth for config screen setup library
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
		exclude(group: 'net.fabricmc.fabric-api')
	}

	// Use TOML for mod config
	implementation(include("com.moandjiezana.toml:toml4j:${project.toml_version}"))

}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()

}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding('UTF-8')
	it.options.deprecation(true)

	it.options.release.set(targetJavaVersion)
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

processResources {
	inputs.property 'version', project.version

	filesMatching('fabric.mod.json') {
		expand 'version': project.version
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
	}
}

runClient {
	jvmArgs('-Dmixin.debug.export=true', '-Xmx1280m')
}

quiltflower {
	addToRuntimeClasspath.set(true)
}

modrinth {
	token = System.getenv('MODRINTH_TOKEN')
	projectId = 'IiuFShHs'
	versionNumber = "$project.version"
	versionType = preRelease ? 'beta' : 'release'
	uploadFile = remapJar
	gameVersions = ["$project.minecraft_version"]
	loaders = ['fabric']
	dependencies = [
			new ModDependency('P7dR8mSH', 'required'),
			new ModDependency('mOgUt4GM', 'optional')
	]
}

def CURSEFORGE_TOKEN = System.getenv('CURSEFORGE_TOKEN')

curseforge {
	apiKey CURSEFORGE_TOKEN == null ? '' : CURSEFORGE_TOKEN
	project {
		id = '504899'
		releaseType = preRelease ? 'beta' : 'release'
		changelogType = 'markdown'
		changelog = file('changelog.md')
		relations {
			requiredDependency 'fabric-api'
		}
		addGameVersion "1.18-SNAPSHOT"
		addGameVersion 'Fabric'

		mainArtifact(remapJar) {
			displayName = "[$project.minecraft_version] v$project.version"
		}
		afterEvaluate {
			uploadTask.dependsOn(remapJar)
		}
	}
	options {
		forgeGradleIntegration = false
	}
}