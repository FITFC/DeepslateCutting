import com.modrinth.minotaur.TaskModrinthUpload

plugins {
	id 'fabric-loom' version '0.10.+'
	id 'maven-publish'
	id 'com.modrinth.minotaur' version '1.2.1'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.github.johnrengelman.shadow' version '7.0.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name + '-' + project.minecraft_version
version = project.mod_version
group = project.maven_group

boolean preRelease = true

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url = 'https://maven.terraformersmc.com/releases/'}
	maven { url = 'https://maven.shedaniel.me/'}
	// for maybe-more-data
	maven { url = 'https://jitpack.io'}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.minecraft_version}+build.${project.yarn_mappings}:v2"

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	//Mod Menu for allowing easier config access
	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

	// maybe-data for conditional recipe loading
	modImplementation "com.github.NoComment1105:maybe-more-data:${project.maybedata_version}"
	include "com.github.NoComment1105:maybe-more-data:${project.maybedata_version}"

	// Cloth for config screen setup library
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
		exclude(group: 'net.fabricmc.fabric-api')
	}

	// Use TOML for mod config
	implementation(include("com.moandjiezana.toml:toml4j:${project.toml_version}"))

}

processResources {
	inputs.property 'version', project.version

	filesMatching('fabric.mod.json') {
		expand 'version': project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = 'UTF-8'

	// Minecraft 1.17 (21w19a) upwards uses Java 16.
	it.options.release.set(17)
}
tasks {
	build {
		dependsOn(shadowJar)
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the 'build' task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
	task modrinth(type: TaskModrinthUpload, dependsOn: remapJar) {
		onlyIf {
			System.getenv('MODRINTH_TOKEN')
		}
		token = System.getenv('MODRINTH_TOKEN')
		projectId = 'IiuFShHs'
		versionNumber = "DeepslateCutting $project.version"
		versionName = "[$project.minecraft_version] v$project.version"
		versionType = preRelease ? 'BETA' : 'RELEASE'
		uploadFile = remapJar
		addGameVersion("$project.minecraft_version")
		addLoader('fabric')
	}
	def CURSEFORGE_TOKEN = System.getenv('CURSEFORGE_TOKEN')

	curseforge {
		apiKey CURSEFORGE_TOKEN == null ? '' : CURSEFORGE_TOKEN
		project {
			id = '504899'
			releaseType = preRelease ? 'beta' : 'release'
			changelogType = 'markdown'
			changelog = file('changelog.md')
			relations {
				requiredDependency 'fabric-api'
			}
			addGameVersion "1.18-Snapshot"
			addGameVersion 'Fabric'

			mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")) {
				displayName = "[$project.minecraft_version] v$project.version"
			}
			afterEvaluate {
				uploadTask.dependsOn(remapJar)
			}
		}
		options {
			forgeGradleIntegration = false
		}
	}
}
